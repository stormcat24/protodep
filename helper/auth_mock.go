// Code generated by MockGen. DO NOT EDIT.
// Source: auth.go

// Package mock_helper is a generated GoMock package.
package helper

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	transport "gopkg.in/src-d/go-git.v4/plumbing/transport"
)

// MockAuthProvider is a mock of AuthProvider interface
type MockAuthProvider struct {
	ctrl     *gomock.Controller
	recorder *MockAuthProviderMockRecorder
}

// MockAuthProviderMockRecorder is the mock recorder for MockAuthProvider
type MockAuthProviderMockRecorder struct {
	mock *MockAuthProvider
}

// NewMockAuthProvider creates a new mock instance
func NewMockAuthProvider(ctrl *gomock.Controller) *MockAuthProvider {
	mock := &MockAuthProvider{ctrl: ctrl}
	mock.recorder = &MockAuthProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockAuthProvider) EXPECT() *MockAuthProviderMockRecorder {
	return m.recorder
}

// GetRepositoryURL mocks base method
func (m *MockAuthProvider) GetRepositoryURL(reponame string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRepositoryURL", reponame)
	ret0, _ := ret[0].(string)
	return ret0
}

// GetRepositoryURL indicates an expected call of GetRepositoryURL
func (mr *MockAuthProviderMockRecorder) GetRepositoryURL(reponame interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRepositoryURL", reflect.TypeOf((*MockAuthProvider)(nil).GetRepositoryURL), reponame)
}

// AuthMethod mocks base method
func (m *MockAuthProvider) AuthMethod() (transport.AuthMethod, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AuthMethod")
	ret0, _ := ret[0].(transport.AuthMethod)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AuthMethod indicates an expected call of AuthMethod
func (mr *MockAuthProviderMockRecorder) AuthMethod() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AuthMethod", reflect.TypeOf((*MockAuthProvider)(nil).AuthMethod))
}
