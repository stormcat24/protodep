// Code generated by MockGen. DO NOT EDIT.
// Source: auth.go

// Package helper is a generated GoMock package.
package helper

import (
	reflect "reflect"

	transport "github.com/go-git/go-git/v5/plumbing/transport"
	gomock "github.com/golang/mock/gomock"
)

// MockAuthOption is a mock of AuthOption interface.
type MockAuthOption struct {
	ctrl     *gomock.Controller
	recorder *MockAuthOptionMockRecorder
}

// MockAuthOptionMockRecorder is the mock recorder for MockAuthOption.
type MockAuthOptionMockRecorder struct {
	mock *MockAuthOption
}

// NewMockAuthOption creates a new mock instance.
func NewMockAuthOption(ctrl *gomock.Controller) *MockAuthOption {
	mock := &MockAuthOption{ctrl: ctrl}
	mock.recorder = &MockAuthOptionMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthOption) EXPECT() *MockAuthOptionMockRecorder {
	return m.recorder
}

// apply mocks base method.
func (m *MockAuthOption) apply(arg0 *authOptions) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "apply", arg0)
}

// apply indicates an expected call of apply.
func (mr *MockAuthOptionMockRecorder) apply(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "apply", reflect.TypeOf((*MockAuthOption)(nil).apply), arg0)
}

// MockAuthProvider is a mock of AuthProvider interface.
type MockAuthProvider struct {
	ctrl     *gomock.Controller
	recorder *MockAuthProviderMockRecorder
}

// MockAuthProviderMockRecorder is the mock recorder for MockAuthProvider.
type MockAuthProviderMockRecorder struct {
	mock *MockAuthProvider
}

// NewMockAuthProvider creates a new mock instance.
func NewMockAuthProvider(ctrl *gomock.Controller) *MockAuthProvider {
	mock := &MockAuthProvider{ctrl: ctrl}
	mock.recorder = &MockAuthProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthProvider) EXPECT() *MockAuthProviderMockRecorder {
	return m.recorder
}

// AuthMethod mocks base method.
func (m *MockAuthProvider) AuthMethod() (transport.AuthMethod, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AuthMethod")
	ret0, _ := ret[0].(transport.AuthMethod)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AuthMethod indicates an expected call of AuthMethod.
func (mr *MockAuthProviderMockRecorder) AuthMethod() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AuthMethod", reflect.TypeOf((*MockAuthProvider)(nil).AuthMethod))
}

// GetRepositoryURL mocks base method.
func (m *MockAuthProvider) GetRepositoryURL(reponame string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRepositoryURL", reponame)
	ret0, _ := ret[0].(string)
	return ret0
}

// GetRepositoryURL indicates an expected call of GetRepositoryURL.
func (mr *MockAuthProviderMockRecorder) GetRepositoryURL(reponame interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRepositoryURL", reflect.TypeOf((*MockAuthProvider)(nil).GetRepositoryURL), reponame)
}
